//-------------------------------------------------------------------------
//    Block.sv                                                                                                --
//-------------------------------------------------------------------------


module  Block ( input Reset, frame_clk,
					input [7:0] keycode,
               output [9:0]  BlockX, BlockY, BlockS );
    
    logic [9:0] Block_X_Pos, Block_X_Motion, Block_Y_Pos, Block_Y_Motion, Block_Size;
	 
    parameter [9:0] Block_X_Center=320;  // Center position on the X axis
    parameter [9:0] Block_Y_Center=240;  // Center position on the Y axis
    parameter [9:0] Block_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Block_X_Max=639;     // Rightmost point on the X axis
    parameter [9:0] Block_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Block_Y_Max=479;     // Bottommost point on the Y axis
    parameter [9:0] Block_X_Step=1;      // Step size on the X axis
    parameter [9:0] Block_Y_Step=1;      // Step size on the Y axis

    assign Block_Size = 4;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Block
        if (Reset)  // Asynchronous Reset
        begin 
            Block_Y_Motion <= 10'd0; //Block_Y_Step;
				Block_X_Motion <= 10'd0; //Block_X_Step;
				Block_Y_Pos <= Block_Y_Center;
				Block_X_Pos <= Block_X_Center;
        end
           
        else 
        begin 
				 if ( (Block_Y_Pos + Block_Size) >= Block_Y_Max )  // Block is at the bottom edge, BOUNCE!
					  Block_Y_Motion <= (~ (Block_Y_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Block_Y_Pos - Block_Size) <= Block_Y_Min )  // Block is at the top edge, BOUNCE!
					  Block_Y_Motion <= Block_Y_Step;
					  
				  else if ( (Block_X_Pos + Block_Size) >= Block_X_Max )  // Block is at the Right edge, BOUNCE!
					  Block_X_Motion <= (~ (Block_X_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Block_X_Pos - Block_Size) <= Block_X_Min )  // Block is at the Left edge, BOUNCE!
					  Block_X_Motion <= Block_X_Step;
					  
				 else 
					  Block_Y_Motion <= Block_Y_Motion;  // Block is somewhere in the middle, don't bounce, just keep moving
					  
				 
				 case (keycode)
					8'h04 : begin

								Block_X_Motion <= -1;//A
								Block_Y_Motion<= 0;
							  end
					        
					8'h07 : begin
								
					        Block_X_Motion <= 1;//D
							  Block_Y_Motion <= 0;
							  end

							  
					8'h16 : begin

					        Block_Y_Motion <= 1;//S
							  Block_X_Motion <= 0;
							 end
							  
					8'h1A : begin
					        Block_Y_Motion <= -1;//W
							  Block_X_Motion <= 0;
							 end	  
					default: ;
			   endcase
				 
				 Block_Y_Pos <= (Block_Y_Pos + Block_Y_Motion);  // Update Block position
				 Block_X_Pos <= (Block_X_Pos + Block_X_Motion);
			
			
	  /**************************************************************************************
	    ATTENTION! Please answer the following quesiton in your lab report! Points will be allocated for the answers!
		 Hidden Question #2/2:
          Note that Block_Y_Motion in the above statement may have been changed at the same clock edge
          that is causing the assignment of Block_Y_pos.  Will the new value of Block_Y_Motion be used,
          or the old?  How will this impact behavior of the Block during a bounce, and how might that 
          interact with a response to a keypress?  Can you fix it?  Give an answer in your Post-Lab.
      **************************************************************************************/
      
			
		end  
    end
       
    assign BlockX = Block_X_Pos;
   
    assign BlockY = Block_Y_Pos;
   
    assign BlockS = Block_Size;
    

endmodule
